version: 2.0

jobs:
  archlinux:
    docker:
      - image: archlinux/base
    steps:
      - run:
          name: prepare
          command: |
            pacman -Syu --needed --noconfirm --noprogressbar base-devel git openssh cmake catch2
            sed --in-place 's/^#\s*\(%wheel\s\+ALL=(ALL)\s\+NOPASSWD:\s\+ALL\)/\1/' /etc/sudoers
            echo "tester ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoer
            useradd -m -G wheel builder
      - checkout:
          path: /home/builder/project
      - run:
          name: fix-ownership
          working_directory: /home/builder
          command: chown -R builder project
      - run:
          name: build
          working_directory: /home/builder/project
          command: |
            mkdir build
            cd build
            cmake \
              -DBUILD_TESTS=false \
              -DBUILD_SHARED_LIBS=true \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr \
              ..
            make
      - run:
          name: test
          working_directory: /home/builder/project
          command: |
            cd build
            cmake \
              -DBUILD_TESTS=true \
              -DBUILD_SHARED_LIBS=true \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr \
              ..
            make
            make test
      - run:
          name: generate-source-package
          working_directory: /home/builder/project
          command: |
            cd libhello/package/archlinux
            sudo -u builder ./configure.sh
      - run:
          name: build-package
          working_directory: /home/builder/project
          command: |
            pacman -S --noconfirm --noprogressbar devtools
            cd libhello/package/archlinux/source-package
            sudo -u builder makepkg
  build:
    docker:
      - image: alpine:edge
    steps:
      - run:
          name: install
          command: |
            apk upgrade
            apk add g++ cmake make git
            git clone https://github.com/catchorg/Catch2.git
            cd Catch2
            cmake -Bbuild -H. -DBUILD_TESTING=OFF
            cmake --build build/ --target install
            cd ..
            rm -rf Catch2
      - checkout
      - run:
          name: build
          command: |
            mkdir build
            cd build
            cmake ..
            make
            make test
            mkdir pkg
            make DESTDIR=pkg install
  build2:
    docker:
      - image: ubuntu:disco
    steps:
      - run:
          name: install
          command: |
            apt update && apt -y upgrade
            apt -y install build-essential cmake git
            git clone https://github.com/catchorg/Catch2.git
            cd Catch2
            cmake -Bbuild -H. -DBUILD_TESTING=OFF
            cmake --build build/ --target install
            cd ..
            rm -rf Catch2
      - checkout
      - run:
          name: build
          command: |
            mkdir build
            cd build
            cmake ..
            make
            make test
            mkdir pkg
            make DESTDIR=pkg install

workflows:
 version: 2
 Example_Workflow:
   jobs:
     - archlinux

